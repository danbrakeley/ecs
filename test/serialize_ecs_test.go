package test

import (
	"bytes"
	"fmt"

	"github.com/danbrakeley/ecs"
)

//   ___  ___ ___  __ _  ___ _ __
//  / _ \/ __/ __|/ _` |/ _ \ '_ \
// |  __/ (__\__ \ (_| |  __/ | | |
//  \___|\___|___/\__, |\___|_| |_|  v0.4.0
//                |___/
//
// WARNING: This file was generated by ecsgen.
// Any changes made to this file by hand may be lost.
//

func init() {
	ecs.RegisterComponent(SerialComName, DeserializeSerialCom)
	ecs.RegisterComponent(SerialMultiComName, DeserializeSerialMultiCom)
	ecs.RegisterComponent(SerialRefComName, DeserializeSerialRefCom)
}

//
// *** SerialCom ***

// SerialComName is SerialCom's ComponentName
const SerialComName ecs.ComponentName = "TestSerialCom"

// GetSerialCom returns any SerialCom on the given Entity
func GetSerialCom(e *ecs.Entity) *SerialCom {
	if c := e.GetComponent(SerialComName); c != nil {
		return c.(*SerialCom)
	}
	return nil
}

// GetName is from the Component interface
func (c *SerialCom) GetName() ecs.ComponentName {
	return SerialComName
}

//
// SerialComRef is a SerialCom reference that can be serialized
type SerialComRef struct {
	mgr      *ecs.Manager
	parentID string
}

// NewSerialComRef constructs a SerialComRef
func NewSerialComRef(c *SerialCom) SerialComRef {
	var r SerialComRef
	r.Set(c)
	return r
}

// Set updates this reference to point to the given component (or nil)
func (r *SerialComRef) Set(c *SerialCom) {
	if c == nil {
		r.mgr = nil
		r.parentID = ""
		return
	}
	r.mgr = c.GetManager()
	r.parentID = c.GetEntityID()
}

// IsNil checks if the component pointer == nil
func (r SerialComRef) IsNil() bool {
	return len(r.parentID) == 0
}

// Get resolves this reference to a SerialCom pointer
func (r SerialComRef) Get() *SerialCom {
	if r.IsNil() {
		return nil
	}
	return GetSerialCom(r.mgr.GetEntity(r.parentID))
}

// GetEntity resolves the Entity owning the referenced component
func (r SerialComRef) GetEntity() *ecs.Entity {
	if r.IsNil() {
		return nil
	}
	return r.mgr.GetEntity(r.parentID)
}

// Serialize just writes out the parent entity id
func (r SerialComRef) Serialize(buf *bytes.Buffer) error {
	if r.IsNil() {
		buf.WriteString("null")
		return nil
	}
	buf.WriteString(fmt.Sprintf("\"%s\"", r.parentID))
	return nil
}

//
// *** SerialMultiCom ***

// SerialMultiComName is SerialMultiCom's ComponentName
const SerialMultiComName ecs.ComponentName = "TestSerialMultiCom"

// GetSerialMultiCom returns any SerialMultiCom on the given Entity
func GetSerialMultiCom(e *ecs.Entity) *SerialMultiCom {
	if c := e.GetComponent(SerialMultiComName); c != nil {
		return c.(*SerialMultiCom)
	}
	return nil
}

// GetName is from the Component interface
func (c *SerialMultiCom) GetName() ecs.ComponentName {
	return SerialMultiComName
}

// DeserializeSerialMultiCom creates a SerialMultiCom from the given buffer
func DeserializeSerialMultiCom(mgr *ecs.Manager, e *ecs.Entity, buf *bytes.Buffer) error {
	return fmt.Errorf("DeserializeSerialMultiCom not implemented")
}

//
// SerialMultiComRef is a SerialMultiCom reference that can be serialized
type SerialMultiComRef struct {
	mgr      *ecs.Manager
	parentID string
}

// NewSerialMultiComRef constructs a SerialMultiComRef
func NewSerialMultiComRef(c *SerialMultiCom) SerialMultiComRef {
	var r SerialMultiComRef
	r.Set(c)
	return r
}

// Set updates this reference to point to the given component (or nil)
func (r *SerialMultiComRef) Set(c *SerialMultiCom) {
	if c == nil {
		r.mgr = nil
		r.parentID = ""
		return
	}
	r.mgr = c.GetManager()
	r.parentID = c.GetEntityID()
}

// IsNil checks if the component pointer == nil
func (r SerialMultiComRef) IsNil() bool {
	return len(r.parentID) == 0
}

// Get resolves this reference to a SerialMultiCom pointer
func (r SerialMultiComRef) Get() *SerialMultiCom {
	if r.IsNil() {
		return nil
	}
	return GetSerialMultiCom(r.mgr.GetEntity(r.parentID))
}

// GetEntity resolves the Entity owning the referenced component
func (r SerialMultiComRef) GetEntity() *ecs.Entity {
	if r.IsNil() {
		return nil
	}
	return r.mgr.GetEntity(r.parentID)
}

// Serialize just writes out the parent entity id
func (r SerialMultiComRef) Serialize(buf *bytes.Buffer) error {
	if r.IsNil() {
		buf.WriteString("null")
		return nil
	}
	buf.WriteString(fmt.Sprintf("\"%s\"", r.parentID))
	return nil
}

//
// *** SerialRefCom ***

// SerialRefComName is SerialRefCom's ComponentName
const SerialRefComName ecs.ComponentName = "TestSerialRefCom"

// GetSerialRefCom returns any SerialRefCom on the given Entity
func GetSerialRefCom(e *ecs.Entity) *SerialRefCom {
	if c := e.GetComponent(SerialRefComName); c != nil {
		return c.(*SerialRefCom)
	}
	return nil
}

// GetName is from the Component interface
func (c *SerialRefCom) GetName() ecs.ComponentName {
	return SerialRefComName
}

// DeserializeSerialRefCom creates a SerialRefCom from the given buffer
func DeserializeSerialRefCom(mgr *ecs.Manager, e *ecs.Entity, buf *bytes.Buffer) error {
	return fmt.Errorf("DeserializeSerialRefCom not implemented")
}

//
// SerialRefComRef is a SerialRefCom reference that can be serialized
type SerialRefComRef struct {
	mgr      *ecs.Manager
	parentID string
}

// NewSerialRefComRef constructs a SerialRefComRef
func NewSerialRefComRef(c *SerialRefCom) SerialRefComRef {
	var r SerialRefComRef
	r.Set(c)
	return r
}

// Set updates this reference to point to the given component (or nil)
func (r *SerialRefComRef) Set(c *SerialRefCom) {
	if c == nil {
		r.mgr = nil
		r.parentID = ""
		return
	}
	r.mgr = c.GetManager()
	r.parentID = c.GetEntityID()
}

// IsNil checks if the component pointer == nil
func (r SerialRefComRef) IsNil() bool {
	return len(r.parentID) == 0
}

// Get resolves this reference to a SerialRefCom pointer
func (r SerialRefComRef) Get() *SerialRefCom {
	if r.IsNil() {
		return nil
	}
	return GetSerialRefCom(r.mgr.GetEntity(r.parentID))
}

// GetEntity resolves the Entity owning the referenced component
func (r SerialRefComRef) GetEntity() *ecs.Entity {
	if r.IsNil() {
		return nil
	}
	return r.mgr.GetEntity(r.parentID)
}

// Serialize just writes out the parent entity id
func (r SerialRefComRef) Serialize(buf *bytes.Buffer) error {
	if r.IsNil() {
		buf.WriteString("null")
		return nil
	}
	buf.WriteString(fmt.Sprintf("\"%s\"", r.parentID))
	return nil
}
